/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR

export function {{name}}FormGroupFac(): FormGroup {
  return new FormGroup({
{{#valueProperties}}
{{#if isArray}}
{{#if hasMultipleValidators}}
    {{name}}: new FormControl([], Validators.compose([{{#if required}}Validators.required, {{/if}}{{#if minLength includeZero=true}}Validators.minLength({{minLength}}), {{/if}}{{#if maxLength includeZero=true}}Validators.maxLength({{maxLength}}), {{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}])),
{{else}}
    {{name}}: new FormControl([]{{#if required}}, Validators.required{{/if}}{{#if minLength includeZero=true}}, Validators.minLength({{minLength}}){{/if}}{{#if maxLength}}, Validators.maxLength({{maxLength}}){{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum includeZero=true}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}),
{{/if}}
{{else}}
{{#if hasMultipleValidators}}
    {{name}}: new FormControl('', Validators.compose([{{#if required}}Validators.required, {{/if}}{{#if minLength includeZero=true}}Validators.minLength({{minLength}}), {{/if}}{{#if maxLength}}Validators.maxLength({{maxLength}}), {{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}])),
{{else}}
    {{name}}: new FormControl(''{{#if required}}, Validators.required{{/if}}{{#if minLength includeZero=true}}, Validators.minLength({{minLength}}){{/if}}{{#if maxLength}}, Validators.maxLength({{maxLength}}){{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum includeZero=true}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}),
{{/if}}
{{/if}}
{{/valueProperties}}
{{#referenceProperties}}
{{#if isArray}}
{{#if hasMultipleValidators}}
    {{name}}: new FormArray([], Validators.compose([{{#if required}}Validators.required, {{/if}}{{#if minLength}}Validators.minLength({{minLength}}), {{/if}}{{#if maxLength}}Validators.maxLength({{maxLength}}), {{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}]),
{{else}}
    {{name}}: new FormArray([]{{#if required}}, Validators.required{{/if}}{{#if minLength}}, Validators.minLength({{minLength}}){{/if}}{{#if maxLength}}, Validators.maxLength({{maxLength}}){{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}),
{{/if}}
{{else}}
{{#if hasMultipleValidators}}
    {{name}}: new FormControl('', Validators.compose([{{#if required}}Validators.required, {{/if}}{{#if minLength}}Validators.minLength({{minLength}}), {{/if}}{{#if maxLength}}Validators.maxLength({{maxLength}}), {{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}]),
{{else}}
    {{name}}: new FormControl(''{{#if required}}, Validators.required{{/if}}{{#if minLength}}, Validators.minLength({{minLength}}){{/if}}{{#if maxLength}}, Validators.maxLength({{maxLength}}){{/if}}{{#if minimum includeZero=true}}Validators.min({{minimum}}), {{/if}}{{#if maximum includeZero=true}}Validators.max({{maximum}}), {{/if}}{{#if pattern}}Validators.pattern('{{pattern}}'), {{/if}}),
{{/if}}
{{/if}}
{{/referenceProperties}}
  });
}
